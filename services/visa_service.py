# Service for visa_service
# Created: 2025-03-04 23:44:55
# Author: thuanpony03

from bson import ObjectId
from services.database import db
from services.visa_repository import visa_repository
from nltk import word_tokenize
import re

class VisaService:
    def __init__(self):
        self.repository = visa_repository
        self.common_countries = {
            "nh·∫≠t b·∫£n": ["nh·∫≠t", "japan", "nhat", "nhat ban"],
            "h√†n qu·ªëc": ["h√†n", "korea", "han", "han quoc"],
            "m·ªπ": ["my", "usa", "america", "united states"],
            "trung qu·ªëc": ["trung quoc", "china"],
            "√∫c": ["australia", "uc", "au"],
            "canada": ["canada"],
            "anh": ["anh", "england", "uk"],
            "ph√°p": ["phap", "france"],
            "ƒë·ª©c": ["duc", "germany"],
            "√Ω": ["y", "italy"],
            "t√¢y ban nha": ["tay ban nha", "spain"],
            "h√† lan": ["ha lan", "netherlands"],
            "singapore": ["singapore", "sing"]
        }
        
        self.visa_types = {
            "du l·ªãch": ["du lich", "tourist", "travel"],
            "th∆∞∆°ng m·∫°i": ["thuong mai", "business"],
            "c√¥ng t√°c": ["cong tac", "business"],
            "du h·ªçc": ["du hoc", "student", "study"],
            "k·∫øt h√¥n": ["ket hon", "marriage"],
            "ƒë·ªãnh c∆∞": ["dinh cu", "settlement", "immigrant"],
            "nhi·ªÅu l·∫ßn": ["nhieu lan", "multiple", "multiple entry"],
            "kh·∫©n": ["khan", "urgent", "express"]
        }
    
    def extract_visa_query_info(self, message):
        """Tr√≠ch xu·∫•t th√¥ng tin qu·ªëc gia v√† lo·∫°i visa t·ª´ c√¢u h·ªèi"""
        message = message.lower()
        
        # T√¨m qu·ªëc gia
        extracted_country = None
        for country, aliases in self.common_countries.items():
            if country in message or any(alias in message for alias in aliases):
                extracted_country = country
                break
        
        # T√¨m lo·∫°i visa
        extracted_type = None
        for visa_type, aliases in self.visa_types.items():
            if visa_type in message or any(alias in message for alias in aliases):
                extracted_type = visa_type
                break
                
        # M·∫∑c ƒë·ªãnh l√† du l·ªãch n·∫øu kh√¥ng t√¨m th·∫•y lo·∫°i visa
        if not extracted_type and extracted_country:
            extracted_type = "du l·ªãch"
            
        return {
            "country": extracted_country,
            "visa_type": extracted_type
        }
    
    def get_visa_info(self, message):
        """L·∫•y th√¥ng tin visa d·ª±a tr√™n c√¢u h·ªèi"""
        query_info = self.extract_visa_query_info(message)
        
        if not query_info["country"]:
            return {
                "success": False,
                "message": "Vui l√≤ng n√™u r√µ qu·ªëc gia c·∫ßn xin visa."
            }
            
        visas = self.repository.find_by_country_and_type(
            query_info["country"], 
            query_info["visa_type"]
        )
        
        if not visas:
            return {
                "success": False,
                "message": f"Kh√¥ng t√¨m th·∫•y th√¥ng tin visa {query_info['visa_type'] or ''} cho {query_info['country']}."
            }
            
        if len(visas) == 1:
            return {
                "success": True,
                "data": visas[0],
                "type": "single"
            }
        else:
            return {
                "success": True,
                "data": visas,
                "type": "multiple"
            }
    
    def format_visa_response(self, visa_info, detailed=True):
        """ƒê·ªãnh d·∫°ng ph·∫£n h·ªìi th√¥ng tin visa"""
        if not visa_info or not visa_info["success"]:
            return visa_info["message"]
            
        if visa_info["type"] == "multiple":
            # Hi·ªÉn th·ªã danh s√°ch visa
            visas = visa_info["data"]
            response = f"üõÇ C√ÅC LO·∫†I VISA {visas[0]['country'].upper()}:\n\n"
            
            for i, visa in enumerate(visas, 1):
                response += f"{i}. Visa {visa['visa_type']}\n"
                response += f"   ‚è±Ô∏è Th·ªùi gian x·ª≠ l√Ω: {visa['processing_time']}\n"
                response += f"   üí∞ Ph√≠: {'{:,.0f}'.format(visa['price']).replace(',', '.')} VNƒê\n\n"
                
            response += "B·∫°n mu·ªën t√¨m hi·ªÉu chi ti·∫øt v·ªÅ lo·∫°i visa n√†o? (Nh·∫≠p s·ªë th·ª© t·ª± 1, 2, 3...)"
            return response
            
        else:
            # Hi·ªÉn th·ªã chi ti·∫øt 1 visa
            visa = visa_info["data"]
            response = f"üõÇ VISA {visa['visa_type'].upper()} {visa['country'].upper()}\n\n"
            response += f"‚è±Ô∏è Th·ªùi gian x·ª≠ l√Ω: {visa['processing_time']}\n"
            response += f"üí∞ Ph√≠: {'{:,.0f}'.format(visa['price']).replace(',', '.')} VNƒê\n"
            response += f"‚è≥ Th·ªùi h·∫°n: {visa['validity']}\n\n"
            
            if detailed and "requirements" in visa:
                # Hi·ªÉn th·ªã chi ti·∫øt y√™u c·∫ßu h·ªì s∆°
                response += "üìã Y√äU C·∫¶U H·ªí S∆†:\n"
                
                # N·∫øu c√≥ c·∫•u tr√∫c ph√¢n lo·∫°i
                if isinstance(visa["requirements"], dict):
                    if "personal_docs" in visa["requirements"]:
                        response += "\n‚ñ∂Ô∏è H·ªì s∆° c√° nh√¢n:\n"
                        for i, req in enumerate(visa["requirements"]["personal_docs"], 1):
                            response += f"{i}. {req}\n"
                            
                    if "financial_docs" in visa["requirements"]:
                        response += "\n‚ñ∂Ô∏è Ch·ª©ng minh t√†i ch√≠nh:\n"
                        for i, req in enumerate(visa["requirements"]["financial_docs"], 1):
                            response += f"{i}. {req}\n"
                    
                    if "travel_docs" in visa["requirements"]:
                        response += "\n‚ñ∂Ô∏è T√†i li·ªáu du l·ªãch:\n"
                        for i, req in enumerate(visa["requirements"]["travel_docs"], 1):
                            response += f"{i}. {req}\n"
                    
                    if "employment_docs" in visa["requirements"]:
                        response += "\n‚ñ∂Ô∏è H·ªì s∆° c√¥ng vi·ªác:\n"
                        for i, req in enumerate(visa["requirements"]["employment_docs"], 1):
                            response += f"{i}. {req}\n"
                else:
                    # N·∫øu l√† list th√¥ng th∆∞·ªùng
                    for i, req in enumerate(visa["requirements"], 1):
                        response += f"{i}. {req}\n"
            
            if "notes" in visa and visa["notes"]:
                response += f"\nüìù L∆ØU √ù: {visa['notes']}\n"
                
            if "success_rate" in visa and visa["success_rate"]:
                response += f"\n‚úÖ T·ª∑ l·ªá th√†nh c√¥ng: {visa['success_rate']}\n"
                
            response += "\nüìû B·∫°n c√≥ th·ªÉ li√™n h·ªá hotline 1900 636563 ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n chi ti·∫øt!"
            
            return response
    
    def get_all_visas(self):
        """L·∫•y t·∫•t c·∫£ th√¥ng tin visa"""
        return list(self.repository.collection.find())

# Kh·ªüi t·∫°o service
visa_service = VisaService()