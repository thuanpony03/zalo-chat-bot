# Service for visa_service
# Created: 2025-03-04 23:44:55
# Author: thuanpony03

from bson import ObjectId
from services.database import db
from services.visa_repository import visa_repository
from nltk import word_tokenize
import re
from fuzzywuzzy import process, fuzz
from datetime import datetime

class VisaService:
    def __init__(self):
        self.db = db
        self.repository = visa_repository
        self.common_countries = {
            "nh·∫≠t b·∫£n": ["nh·∫≠t", "japan", "nhat", "nhat ban"],
            "h√†n qu·ªëc": ["h√†n", "korea", "han", "han quoc"],
            "m·ªπ": ["my", "usa", "america", "united states"],
            "trung qu·ªëc": ["trung quoc", "china"],
            "√∫c": ["australia", "uc", "au"],
            "canada": ["canada"],
            "anh": ["anh", "england", "uk"],
            "ph√°p": ["phap", "france"],
            "ƒë·ª©c": ["duc", "germany"],
            "√Ω": ["y", "italy"],
            "t√¢y ban nha": ["tay ban nha", "spain"],
            "h√† lan": ["ha lan", "netherlands"],
            "singapore": ["singapore", "sing"]
        }
        
        self.visa_types = {
            "du l·ªãch": ["du lich", "tourist", "travel"],
            "th∆∞∆°ng m·∫°i": ["thuong mai", "business"],
            "c√¥ng t√°c": ["cong tac", "business"],
            "du h·ªçc": ["du hoc", "student", "study"],
            "k·∫øt h√¥n": ["ket hon", "marriage"],
            "ƒë·ªãnh c∆∞": ["dinh cu", "settlement", "immigrant"],
            "nhi·ªÅu l·∫ßn": ["nhieu lan", "multiple", "multiple entry"],
            "kh·∫©n": ["khan", "urgent", "express"]
        }
        
        self.common_visa_intents = {
            "requirements": ["h·ªì s∆°", "gi·∫•y t·ªù", "c·∫ßn g√¨", "t√†i li·ªáu", "chu·∫©n b·ªã g√¨", "y√™u c·∫ßu"],
            "cost": ["gi√°", "ph√≠", "chi ph√≠", "gi√° c·∫£", "bao nhi√™u ti·ªÅn", "m·∫•t bao nhi√™u"],
            "process": ["quy tr√¨nh", "c√°c b∆∞·ªõc", "th·ªß t·ª•c", "l√†m sao", "nh∆∞ th·∫ø n√†o", "c√°ch xin"],
            "time": ["th·ªùi gian", "m·∫•y ng√†y", "bao l√¢u", "khi n√†o", "m·∫•t bao l√¢u"],
            "success_rate": ["t·ª∑ l·ªá", "t·ª∑ l·ªá ƒë·∫≠u", "kh·∫£ nƒÉng", "c∆° h·ªôi", "ƒë·∫≠u", "c√≥ kh√≥ kh√¥ng"],
            "payment": ["thanh to√°n", "tr·∫£ ti·ªÅn", "chuy·ªÉn kho·∫£n", "th·∫ª t√≠n d·ª•ng", "ti·ªÅn m·∫∑t"],
            "terms": ["ƒëi·ªÅu kho·∫£n", "ch√≠nh s√°ch", "quy ƒë·ªãnh", "ƒëi·ªÅu ki·ªán", "cam k·∫øt"]
        }
    
    def extract_visa_query_info(self, message):
        """Tr√≠ch xu·∫•t th√¥ng tin qu·ªëc gia v√† lo·∫°i visa t·ª´ c√¢u h·ªèi"""
        message = message.lower()
        
        # T√¨m qu·ªëc gia
        extracted_country = None
        for country, aliases in self.common_countries.items():
            if country in message or any(alias in message for alias in aliases):
                extracted_country = country
                break
        
        # T√¨m lo·∫°i visa
        extracted_type = None
        for visa_type, aliases in self.visa_types.items():
            if visa_type in message or any(alias in message for alias in aliases):
                extracted_type = visa_type
                break
                
        # M·∫∑c ƒë·ªãnh l√† du l·ªãch n·∫øu kh√¥ng t√¨m th·∫•y lo·∫°i visa
        if not extracted_type and extracted_country:
            extracted_type = "du l·ªãch"
            
        return {
            "country": extracted_country,
            "visa_type": extracted_type
        }
    
    def get_visa_info(self, message):
        """L·∫•y th√¥ng tin visa d·ª±a tr√™n c√¢u h·ªèi"""
        query_info = self.extract_visa_query_info(message)
        
        if not query_info["country"]:
            return {
                "success": False,
                "message": "Vui l√≤ng n√™u r√µ qu·ªëc gia c·∫ßn xin visa."
            }
            
        visas = self.repository.find_by_country_and_type(
            query_info["country"], 
            query_info["visa_type"]
        )
        
        if not visas:
            return {
                "success": False,
                "message": f"Kh√¥ng t√¨m th·∫•y th√¥ng tin visa {query_info['visa_type'] or ''} cho {query_info['country']}."
            }
            
        if len(visas) == 1:
            return {
                "success": True,
                "data": visas[0],
                "type": "single"
            }
        else:
            return {
                "success": True,
                "data": visas,
                "type": "multiple"
            }
    
    def format_visa_response(self, visa_info, detailed=True):
        """ƒê·ªãnh d·∫°ng ph·∫£n h·ªìi th√¥ng tin visa"""
        if not visa_info or not visa_info["success"]:
            return visa_info["message"]
            
        if visa_info["type"] == "multiple":
            # Hi·ªÉn th·ªã danh s√°ch visa
            visas = visa_info["data"]
            response = f"üõÇ C√ÅC LO·∫†I VISA {visas[0]['country'].upper()}:\n\n"
            
            for i, visa in enumerate(visas, 1):
                response += f"{i}. Visa {visa['visa_type']}\n"
                response += f"   ‚è±Ô∏è Th·ªùi gian x·ª≠ l√Ω: {visa['processing_time']}\n"
                response += f"   üí∞ Ph√≠: {'{:,.0f}'.format(visa['price']).replace(',', '.')} VNƒê\n\n"
                
            response += "B·∫°n mu·ªën t√¨m hi·ªÉu chi ti·∫øt v·ªÅ lo·∫°i visa n√†o? (Nh·∫≠p s·ªë th·ª© t·ª± 1, 2, 3...)"
            return response
            
        else:
            # Hi·ªÉn th·ªã chi ti·∫øt 1 visa
            visa = visa_info["data"]
            response = f"üõÇ VISA {visa['visa_type'].upper()} {visa['country'].upper()}\n\n"
            response += f"‚è±Ô∏è Th·ªùi gian x·ª≠ l√Ω: {visa['processing_time']}\n"
            response += f"üí∞ Ph√≠: {'{:,.0f}'.format(visa['price']).replace(',', '.')} VNƒê\n"
            response += f"‚è≥ Th·ªùi h·∫°n: {visa['validity']}\n\n"
            
            if detailed and "requirements" in visa:
                # Hi·ªÉn th·ªã chi ti·∫øt y√™u c·∫ßu h·ªì s∆°
                response += "üìã Y√äU C·∫¶U H·ªí S∆†:\n"
                
                # N·∫øu c√≥ c·∫•u tr√∫c ph√¢n lo·∫°i
                if isinstance(visa["requirements"], dict):
                    if "personal_docs" in visa["requirements"]:
                        response += "\n‚ñ∂Ô∏è H·ªì s∆° c√° nh√¢n:\n"
                        for i, req in enumerate(visa["requirements"]["personal_docs"], 1):
                            response += f"{i}. {req}\n"
                            
                    if "financial_docs" in visa["requirements"]:
                        response += "\n‚ñ∂Ô∏è Ch·ª©ng minh t√†i ch√≠nh:\n"
                        for i, req in enumerate(visa["requirements"]["financial_docs"], 1):
                            response += f"{i}. {req}\n"
                    
                    if "travel_docs" in visa["requirements"]:
                        response += "\n‚ñ∂Ô∏è T√†i li·ªáu du l·ªãch:\n"
                        for i, req in enumerate(visa["requirements"]["travel_docs"], 1):
                            response += f"{i}. {req}\n"
                    
                    if "employment_docs" in visa["requirements"]:
                        response += "\n‚ñ∂Ô∏è H·ªì s∆° c√¥ng vi·ªác:\n"
                        for i, req in enumerate(visa["requirements"]["employment_docs"], 1):
                            response += f"{i}. {req}\n"
                else:
                    # N·∫øu l√† list th√¥ng th∆∞·ªùng
                    for i, req in enumerate(visa["requirements"], 1):
                        response += f"{i}. {req}\n"
            
            if "notes" in visa and visa["notes"]:
                response += f"\nüìù L∆ØU √ù: {visa['notes']}\n"
                
            if "success_rate" in visa and visa["success_rate"]:
                response += f"\n‚úÖ T·ª∑ l·ªá th√†nh c√¥ng: {visa['success_rate']}\n"
                
            response += "\nüìû B·∫°n c√≥ th·ªÉ li√™n h·ªá hotline 1900 636563 ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n chi ti·∫øt!"
            
            return response
    
    def get_all_visas(self):
        """L·∫•y t·∫•t c·∫£ th√¥ng tin visa"""
        return list(self.repository.collection.find())
    
    def detect_visa_intent(self, message):
        """Ph√°t hi·ªán √Ω ƒë·ªãnh ch√≠nh trong c√¢u h·ªèi v·ªÅ visa"""
        message = message.lower()
        detected_intent = None
        max_score = 0
        
        for intent, keywords in self.common_visa_intents.items():
            for keyword in keywords:
                if keyword in message:
                    count = len(re.findall(rf'\b{keyword}\b', message))
                    score = count * len(keyword)
                    if score > max_score:
                        max_score = score
                        detected_intent = intent
        
        return detected_intent
    
    def extract_visa_info_from_query(self, query):
        """Tr√≠ch xu·∫•t qu·ªëc gia v√† lo·∫°i visa t·ª´ c√¢u h·ªèi"""
        query = query.lower()
        
        # L·∫•y danh s√°ch t·∫•t c·∫£ qu·ªëc gia t·ª´ database
        all_countries = self.repository.get_all_countries()
        
        # T√¨m qu·ªëc gia trong c√¢u h·ªèi b·∫±ng fuzzy matching
        country_match = None
        for country in all_countries:
            if country.lower() in query:
                country_match = country
                break
            
            # Ki·ªÉm tra c√°c bi·∫øn th·ªÉ c·ªßa t√™n qu·ªëc gia
            aliases = self.repository.get_country_aliases(country)
            for alias in aliases:
                if alias.lower() in query:
                    country_match = country
                    break
        
        # T√¨m lo·∫°i visa trong c√¢u h·ªèi
        visa_types = ["du l·ªãch", "th∆∞∆°ng m·∫°i", "c√¥ng t√°c", "du h·ªçc", "ƒë·ªãnh c∆∞", "k·∫øt h√¥n"]
        visa_type_match = None
        for visa_type in visa_types:
            if visa_type.lower() in query:
                visa_type_match = visa_type
                break
        
        # M·∫∑c ƒë·ªãnh l√† du l·ªãch n·∫øu c√≥ qu·ªëc gia nh∆∞ng kh√¥ng c√≥ lo·∫°i visa
        if country_match and not visa_type_match:
            visa_type_match = "du l·ªãch"
        
        return {
            "country": country_match,
            "visa_type": visa_type_match,
            "intent": self.detect_visa_intent(query)
        }
    
    def detect_special_case_query(self, query):
        """Ph√°t hi·ªán c√°c tr∆∞·ªùng h·ª£p ƒë·∫∑c bi·ªát trong c√¢u h·ªèi visa"""
        query = query.lower()
        
        # C√°c pattern cho c√°c tr∆∞·ªùng h·ª£p ƒë·∫∑c bi·ªát
        special_patterns = {
            "no_savings": [
                "kh√¥ng c√≥ s·ªï ti·∫øt ki·ªám", "ko c√≥ s·ªï ti·∫øt ki·ªám", "kh√¥ng c√≥ stk", 
                "ko c√≥ stk", "ch∆∞a c√≥ s·ªï ti·∫øt ki·ªám", "kh√¥ng s·ªï ti·∫øt ki·ªám",
                "thi·∫øu s·ªï ti·∫øt ki·ªám", "kh√¥ng ƒë·ªß ti·ªÅn", "kh√¥ng ƒë·ªß s·ªë d∆∞",
                "ch∆∞a c√≥ ti·ªÅn ti·∫øt ki·ªám"
            ],
            "freelance_job": [
                "c√¥ng vi·ªác t·ª± do", "l√†m t·ª± do", "kh√¥ng c√≥ c√¥ng ty", "ko c√≥ c√¥ng ty",
                "kh√¥ng ƒëi l√†m c√¥ng ty", "kh√¥ng c√≥ h·ª£p ƒë·ªìng lao ƒë·ªông", "kh√¥ng c√≥ hdld",
                "l√†m freelance", "t·ª± kinh doanh", "kinh doanh t·ª± do", "kh√¥ng c√≥ hƒëlƒë"
            ],
            "illegal_stay": [
                "b·∫•t h·ª£p ph√°p", "bat hop phap", "·ªü l·∫°i", "·ªü l·∫≠u", "kh√¥ng gi·∫•y ph√©p",
                "qu√° h·∫°n visa", "qua han visa", "l∆∞u tr√∫ qu√° h·∫°n", "·ªü l·∫°i chui",
                "·ªü b·∫•t h·ª£p ph√°p", "xin t·ªã n·∫°n", "ti n·∫°n", "nh·∫≠p c∆∞ l·∫≠u"
            ],
            "tax_issues": [
                "kh√¥ng ƒë√≥ng thu·∫ø", "ko ƒë√≥ng thu·∫ø", "ch∆∞a ƒë√≥ng thu·∫ø", "tr·ªën thu·∫ø",
                "kh√¥ng k√™ khai thu·∫ø", "kh√¥ng c√≥ thu·∫ø", "kh√¥ng ƒë·ªß thu·∫ø", "thi·∫øu thu·∫ø"
            ],
            "no_bank_statement": [
                "kh√¥ng sao k√™", "ko sao k√™", "kh√¥ng c√≥ sao k√™", "ko c√≥ sao k√™",
                "kh√¥ng c√≥ gi·∫•y sao k√™", "kh√¥ng ch·ª©ng minh t√†i ch√≠nh", "thi·∫øu sao k√™",
                "kh√¥ng c√≥ b·∫£ng l∆∞∆°ng", "kh√¥ng ch·ª©ng minh thu nh·∫≠p"
            ],
            "proof_request": [
                "c√≥ ch·ª©ng minh c√¥ng vi·ªác", "c√≥ l√†m ch·ª©ng minh", "gi√∫p ch·ª©ng minh",
                "h·ªó tr·ª£ ch·ª©ng minh", "c√≥ l√†m gi·∫•y t·ªù gi·∫£", "gi·∫•y t·ªù ·∫£o", "h·ªó tr·ª£ h·ªì s∆°",
                "l√†m gi·∫•y t·ªù", "h·ªì s∆° kh√≥ khƒÉn", "gi√∫p l√†m h·ªì s∆°", "c√≥ th·ªÉ h·ªó tr·ª£ l√†m"
            ],
            "previous_rejection": [
                "ƒë√£ t·ª´ng b·ªã t·ª´ ch·ªëi", "b·ªã t·ª´ ch·ªëi visa", "ƒë√£ b·ªã t·ª´ ch·ªëi", "t·ª´ng b·ªã t·ª´ ch·ªëi", 
                "b·ªã tr∆∞·ª£t visa", "ƒë√£ tr∆∞·ª£t", "b·ªã ƒë√°nh tr∆∞·ª£t", "t·ª´ng b·ªã tr∆∞·ª£t"
            ],
            "travel_with_family": [
                "ƒëi c√πng gia ƒë√¨nh", "ƒëi c√πng v·ª£", "ƒëi c√πng ch·ªìng", "ƒëi v·ªõi con",
                "ƒëi du l·ªãch gia ƒë√¨nh", "ƒëi v·ªõi gia ƒë√¨nh", "ƒëi chung v·ªõi gia ƒë√¨nh"
            ]
        }
        
        # Ki·ªÉm tra xem query c√≥ match v·ªõi pattern n√†o kh√¥ng
        for case_type, patterns in special_patterns.items():
            for pattern in patterns:
                if pattern in query:
                    return case_type
        
        return None
    
    def get_special_case_response(self, case_type=None):
        """Tr·∫£ v·ªÅ ph·∫£n h·ªìi ph√π h·ª£p cho tr∆∞·ªùng h·ª£p ƒë·∫∑c bi·ªát"""
        standard_response = ("D·∫°, v·∫•n ƒë·ªÅ n√†y kh√¥ng ph·∫£i tr·ªü ng·∫°i l·ªõn ƒë√¢u ·∫°! Passport Lounge ƒë√£ h·ªó tr·ª£ nhi·ªÅu kh√°ch h√†ng trong tr∆∞·ªùng h·ª£p t∆∞∆°ng t·ª± th√†nh c√¥ng. Vui l√≤ng g·ªçi 1900 636563 ho·∫∑c ƒë·ªÉ l·∫°i SƒêT ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n ph∆∞∆°ng √°n ph√π h·ª£p nh·∫•t ·∫°.")
        
        # Ph·∫£n h·ªìi t√πy theo t·ª´ng tr∆∞·ªùng h·ª£p
        special_responses = {
            "no_savings": ("D·∫°, kh√¥ng c√≥ s·ªï ti·∫øt ki·ªám kh√¥ng ph·∫£i l√† v·∫•n ƒë·ªÅ l·ªõn. Passport Lounge c√≥ nhi·ªÅu gi·∫£i ph√°p thay th·∫ø hi·ªáu qu·∫£. Vui l√≤ng g·ªçi 1900 636563 ho·∫∑c ƒë·ªÉ l·∫°i SƒêT ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n ngay ·∫°."),
                          
            "freelance_job": ("D·∫°, ngh·ªÅ t·ª± do v·∫´n xin visa ƒë∆∞·ª£c n·∫øu c√≥ ph∆∞∆°ng √°n ch·ª©ng minh ph√π h·ª£p. Passport Lounge ƒë√£ h·ªó tr·ª£ th√†nh c√¥ng nhi·ªÅu kh√°ch h√†ng t∆∞∆°ng t·ª±. Vui l√≤ng g·ªçi 1900 636563 ho·∫∑c ƒë·ªÉ l·∫°i SƒêT ·∫°."),
                             
            "illegal_stay": ("D·∫°, ƒë√¢y l√† tr∆∞·ªùng h·ª£p c·∫ßn ƒë∆∞·ª£c t∆∞ v·∫•n ri√™ng. ƒê·ªÉ ƒë·∫£m b·∫£o quy·ªÅn l·ª£i cho qu√Ω kh√°ch, vui l√≤ng g·ªçi 1900 636563 ho·∫∑c ƒë·ªÉ l·∫°i SƒêT ƒë·ªÉ ƒë∆∞·ª£c chuy√™n vi√™n cao c·∫•p t∆∞ v·∫•n k√≠n ·∫°."),
                           
            "tax_issues": ("D·∫°, v·∫•n ƒë·ªÅ thu·∫ø ho√†n to√†n c√≥ gi·∫£i ph√°p ph√π h·ª£p. Passport Lounge ƒë√£ h·ªó tr·ª£ nhi·ªÅu tr∆∞·ªùng h·ª£p t∆∞∆°ng t·ª±. Vui l√≤ng g·ªçi 1900 636563 ho·∫∑c ƒë·ªÉ l·∫°i SƒêT ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n ·∫°."),
                         
            "no_bank_statement": ("D·∫°, kh√¥ng c√≥ sao k√™ ng√¢n h√†ng v·∫´n c√≥ th·ªÉ xin visa. Passport Lounge c√≥ nhi·ªÅu ph∆∞∆°ng √°n thay th·∫ø hi·ªáu qu·∫£. Vui l√≤ng g·ªçi 1900 636563 ho·∫∑c ƒë·ªÉ l·∫°i SƒêT ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n ·∫°."),
                                
            "proof_request": ("D·∫°, Passport Lounge ch·ªâ h·ªó tr·ª£ h·ªì s∆° h·ª£p ph√°p v√† ƒë·∫ßy ƒë·ªß. Ch√∫ng t√¥i c√≥ nhi·ªÅu ph∆∞∆°ng √°n ch·ª©ng minh ph√π h·ª£p v·ªõi t·ª´ng tr∆∞·ªùng h·ª£p. Vui l√≤ng g·ªçi 1900 636563 ho·∫∑c ƒë·ªÉ l·∫°i SƒêT ·∫°."),
                            
            "previous_rejection": ("D·∫°, t·ª´ng b·ªã t·ª´ ch·ªëi v·∫´n c√≥ th·ªÉ ƒë·∫≠u visa n·∫øu chu·∫©n b·ªã ƒë√∫ng c√°ch. Passport Lounge ƒë√£ gi√∫p nhi·ªÅu kh√°ch h√†ng th√†nh c√¥ng sau khi t·ª´ng b·ªã t·ª´ ch·ªëi. Vui l√≤ng g·ªçi 1900 636563 ·∫°."),
                                 
            "travel_with_family": ("D·∫°, ƒëi du l·ªãch gia ƒë√¨nh c·∫ßn l∆∞u √Ω m·ªôt s·ªë ƒëi·ªÉm ƒë·∫∑c bi·ªát trong h·ªì s∆°. Passport Lounge s·∫Ω h∆∞·ªõng d·∫´n c√°ch chu·∫©n b·ªã t·ªëi ∆∞u. Vui l√≤ng g·ªçi 1900 636563 ho·∫∑c ƒë·ªÉ l·∫°i SƒêT ·∫°.")
        }
        
        if case_type in special_responses:
            return special_responses[case_type]
        
        return standard_response
    
    def collect_customer_contact(self, user_query, user_id):
        """Thu th·∫≠p th√¥ng tin li√™n h·ªá c·ªßa kh√°ch h√†ng"""
        phone_pattern = r'(0[0-9]{9,10})|(\+84[0-9]{9,10})'
        phone_matches = re.findall(phone_pattern, user_query)
        
        phone_number = None
        if phone_matches:
            phone_number = phone_matches[0][0] or phone_matches[0][1]
            
        if phone_number:
            try:
                # L∆∞u th√¥ng tin kh√°ch h√†ng v√†o database
                customer_data = {
                    "user_id": user_id,
                    "phone": phone_number,
                    "source": "zalo_chat",
                    "query": user_query,
                    "status": "new_lead",
                    "created_at": datetime.now()
                }
                self.db.leads.insert_one(customer_data)
                
                return {
                    "success": True,
                    "message": f"C·∫£m ∆°n ƒë√£ ƒë·ªÉ l·∫°i s·ªë {phone_number}. Chuy√™n vi√™n visa Passport Lounge s·∫Ω g·ªçi l·∫°i t∆∞ v·∫•n cho b·∫°n trong th·ªùi gian s·ªõm nh·∫•t!"
                }
            except Exception as e:
                print(f"Error collecting customer contact: {e}")
                
        return None
    
    def answer_visa_question(self, user_query, user_id=None):
        """Tr·∫£ l·ªùi c√¢u h·ªèi v·ªÅ visa d·ª±a tr√™n √Ω ƒë·ªãnh v√† th√¥ng tin tr√≠ch xu·∫•t"""
        # Ki·ªÉm tra n·∫øu ng∆∞·ªùi d√πng ƒëang cung c·∫•p s·ªë ƒëi·ªán tho·∫°i
        contact_response = None
        if user_id:
            contact_response = self.collect_customer_contact(user_query, user_id)
            if contact_response:
                return contact_response
                
        # Ki·ªÉm tra n·∫øu l√† tr∆∞·ªùng h·ª£p ƒë·∫∑c bi·ªát
        special_case = self.detect_special_case_query(user_query)
        if (special_case):
            return {
                "success": True,
                "message": self.get_special_case_response(special_case),
                "type": "special_case"
            }
            
        # X·ª≠ l√Ω c√¢u h·ªèi th√¥ng th∆∞·ªùng n·∫øu kh√¥ng ph·∫£i case ƒë·∫∑c bi·ªát
        extracted_info = self.extract_visa_info_from_query(user_query)
        
        if not extracted_info["country"]:
            return {
                "success": False,
                "message": "Vui l√≤ng cho bi·∫øt b·∫°n c·∫ßn t√¨m hi·ªÉu v·ªÅ visa c·ªßa qu·ªëc gia n√†o?"
            }
        
        # T√¨m th√¥ng tin visa t·ª´ database
        visas = self.repository.find_by_country_and_type(
            extracted_info["country"],
            extracted_info["visa_type"]
        )
        
        if not visas:
            return {
                "success": False,
                "message": f"Xin l·ªói, hi·ªán t·∫°i ch√∫ng t√¥i kh√¥ng c√≥ th√¥ng tin v·ªÅ visa {extracted_info['visa_type'] or ''} cho {extracted_info['country']}."
            }
        
        # N·∫øu c√≥ intent c·ª• th·ªÉ, tr·∫£ l·ªùi d·ª±a v√†o intent
        if extracted_info["intent"] and len(visas) == 1:
            return self.format_visa_response_by_intent(
                visas[0],
                extracted_info["intent"],
                user_query
            )
        
        # N·∫øu kh√¥ng c√≥ intent c·ª• th·ªÉ ho·∫∑c c√≥ nhi·ªÅu lo·∫°i visa
        if len(visas) == 1:
            return {
                "success": True,
                "data": visas[0],
                "type": "single"
            }
        else:
            return {
                "success": True,
                "data": visas,
                "type": "multiple"
            }
    
    def format_visa_response_by_intent(self, visa, intent, original_query):
        """ƒê·ªãnh d·∫°ng ph·∫£n h·ªìi d·ª±a v√†o √Ω ƒë·ªãnh c·ªßa ng∆∞·ªùi d√πng"""
        if intent == "requirements":
            return self.format_requirements_response(visa)
        elif intent == "cost":
            return self.format_cost_response(visa)
        elif intent == "process":
            return self.format_process_response(visa)
        elif intent == "time":
            return self.format_time_response(visa)
        elif intent == "success_rate":
            return self.format_success_rate_response(visa)
        elif intent == "payment":
            return self.format_payment_response(visa)
        elif intent == "terms":
            return self.format_terms_response(visa)
        else:
            # M·∫∑c ƒë·ªãnh tr·∫£ v·ªÅ th√¥ng tin t·ªïng qu√°t
            return {
                "success": True,
                "data": visa,
                "type": "single"
            }
    
    def format_requirements_response(self, visa):
        """ƒê·ªãnh d·∫°ng ph·∫£n h·ªìi v·ªÅ y√™u c·∫ßu h·ªì s∆°"""
        response = f"üìã H·ªí S∆† XIN VISA {visa['visa_type'].upper()} {visa['country'].upper()}\n\n"
        
        if "requirements" in visa:
            if isinstance(visa["requirements"], dict):
                for category, docs in visa["requirements"].items():
                    if category == "personal_docs":
                        response += "‚ñ∂Ô∏è H·ªì s∆° nh√¢n th√¢n:\n"
                    elif category == "financial_docs":
                        response += "‚ñ∂Ô∏è H·ªì s∆° ch·ª©ng minh t√†i s·∫£n:\n"
                    elif category == "employment_docs":
                        response += "‚ñ∂Ô∏è H·ªì s∆° c√¥ng vi·ªác & thu nh·∫≠p:\n"
                    elif category == "travel_docs":
                        response += "‚ñ∂Ô∏è Gi·∫•y t·ªù chuy·∫øn ƒëi:\n"
                    else:
                        response += f"‚ñ∂Ô∏è {category}:\n"
                    
                    for i, doc in enumerate(docs, 1):
                        response += f"{i}. {doc}\n"
                    response += "\n"
            else:
                for i, req in enumerate(visa["requirements"], 1):
                    response += f"{i}. {req}\n"
        
        response += f"\nüìû ƒê·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n chi ti·∫øt, vui l√≤ng g·ªçi 1900 636563"
        
        return {
            "success": True,
            "message": response,
            "type": "intent_response"
        }
    
    # T∆∞∆°ng t·ª± cho c√°c h√†m format kh√°c (cost, process, time, etc.)
    
    def format_visa_info_message(self, visa):
        """ƒê·ªãnh d·∫°ng th√¥ng tin visa ƒë·ªÉ hi·ªÉn th·ªã cho ng∆∞·ªùi d√πng"""
        response = f"üõÇ VISA {visa['visa_type'].upper()} {visa['country'].upper()}\n\n"
        response += f"üí∞ Gi√°: ${visa['price']} USD\n"
        response += f"‚è±Ô∏è Th·ªùi gian x·ª≠ l√Ω: {visa['processing_time']}\n"
        
        if "success_rate" in visa and visa["success_rate"]:
            response += f"‚úÖ T·ª∑ l·ªá ƒë·∫≠u visa: {visa['success_rate']}%\n\n"
        
        response += "‚ú® QUY·ªÄN L·ª¢I:\n"
        if "benefits" in visa and visa["benefits"]:
            for benefit in visa["benefits"]:
                response += f"‚úì {benefit}\n"
        
        response += "\nüìã QUY TR√åNH XIN VISA:\n"
        if "process_steps" in visa and visa["process_steps"]:
            for i, step in enumerate(visa["process_steps"], 1):
                response += f"{i}. {step['name']}: {step['description']}\n"
        
        response += "\nüíº CHI PH√ç D·ªäCH V·ª§:\n"
        if "costs" in visa and "options" in visa["costs"]:
            for option in visa["costs"]["options"]:
                response += f"- {option['type']}: ${option['price']} USD ({option['duration']})\n"
        
        response += f"\nüìû Hotline h·ªó tr·ª£: 1900 636563\n"
        
        return response

    def search_visa_info(self, country=None, visa_type=None):
        """Search for visa information based on country and type"""
        query = {}
        
        if country:
            country = country.lower().strip()
            query["$or"] = [
                {"country": {"$regex": country, "$options": "i"}},
                {"country_aliases": {"$elemMatch": {"$regex": country, "$options": "i"}}}
            ]
            
        if visa_type:
            visa_type = visa_type.lower().strip()
            if "$or" not in query:
                query["$or"] = []
            
            query["$or"].extend([
                {"visa_type": {"$regex": visa_type, "$options": "i"}},
                {"type_aliases": {"$elemMatch": {"$regex": visa_type, "$options": "i"}}}
            ])
            
        return list(self.db.visas.find(query))
        
    def _calculate_match_score(self, visa, query):
        """Calculate how well a visa matches the query"""
        query = query.lower().strip()
        scores = []
        
        # Check country match
        country_score = fuzz.partial_ratio(query, visa.get('country', '').lower())
        for alias in visa.get('country_aliases', []):
            alias_score = fuzz.partial_ratio(query, alias.lower())
            country_score = max(country_score, alias_score)
        scores.append(country_score)
        
        # Check visa type match
        type_score = fuzz.partial_ratio(query, visa.get('visa_type', '').lower())
        for alias in visa.get('type_aliases', []):
            alias_score = fuzz.partial_ratio(query, alias.lower())
            type_score = max(type_score, alias_score)
        scores.append(type_score)
        
        # Return weighted average
        return 0.7 * country_score + 0.3 * type_score
        
    def format_visa_info(self, visa):
        """Format visa information for display to users"""
        if not visa:
            return "Kh√¥ng t√¨m th·∫•y th√¥ng tin visa ph√π h·ª£p."
            
        response = f"üõÇ VISA {visa['visa_type'].upper()} {visa['country'].upper()}\n\n"
        response += f"üí∞ Gi√°: ${visa['price']} USD\n"
        response += f"‚è±Ô∏è Th·ªùi gian x·ª≠ l√Ω: {visa['processing_time']}\n"
        
        if "success_rate" in visa:
            response += f"‚úÖ T·ª∑ l·ªá ƒë·∫≠u visa: {visa['success_rate']}%\n\n"
            
        response += "üìã H·ªí S∆† C·∫¶N THI·∫æT:\n"
        for category, docs in visa.get("requirements", {}).items():
            if isinstance(docs, list):
                for doc in docs:
                    response += f"‚Ä¢ {doc}\n"
            elif isinstance(docs, dict):
                for key, items in docs.items():
                    response += f"\n{key.capitalize()}:\n"
                    for item in items:
                        response += f"‚Ä¢ {item}\n"
                        
        response += "\nüíº CHI PH√ç:\n"
        for option in visa.get("costs", {}).get("options", []):
            response += f"‚Ä¢ {option['type']}: ${option['price']} USD ({option['duration']})\n"
            
        response += f"\nüìû Hotline h·ªó tr·ª£: 1900 636563\n"
        response += f"\nƒê·ªÉ ƒë·∫∑t d·ªãch v·ª• visa, vui l√≤ng tr·∫£ l·ªùi 'ƒê·∫∑t visa {visa['country']}'"
        
        return response

    def answer_specific_visa_query(self, query, visa_data):
        """Provide focused answers to specific visa questions using available data"""
        query_lower = query.lower()
        
        # Detect intent patterns in user's question
        intent = None
        if any(word in query_lower for word in ["h·ªì s∆°", "gi·∫•y t·ªù", "c·∫ßn g√¨", "chu·∫©n b·ªã"]):
            intent = "requirements"
        elif any(word in query_lower for word in ["gi√°", "ph√≠", "chi ph√≠", "bao nhi√™u ti·ªÅn"]):
            intent = "cost"
        elif any(word in query_lower for word in ["th·ªùi gian", "m·∫•y ng√†y", "bao l√¢u", "khi n√†o"]):
            intent = "processing_time"
        elif any(word in query_lower for word in ["quy tr√¨nh", "c√°c b∆∞·ªõc", "th·ªß t·ª•c", "l√†m sao"]):
            intent = "process"
        elif any(word in query_lower for word in ["t·ª∑ l·ªá", "kh·∫£ nƒÉng", "c∆° h·ªôi", "c√≥ kh√≥ kh√¥ng"]):
            intent = "success_rate"
        
        # Format response based on detected intent
        if intent == "requirements":
            return self._format_requirements_response(visa_data)
        elif intent == "cost":
            return self._format_cost_response(visa_data)
        elif intent == "processing_time":
            return self._format_time_response(visa_data)  
        elif intent == "process":
            return self._format_process_response(visa_data)
        elif intent == "success_rate":
            return self._format_success_rate_response(visa_data)
        else:
            return self._format_general_response(visa_data)
    
    def _format_requirements_response(self, visa):
        """Format detailed visa requirements response"""
        response = f"üìã H·ªí S∆† XIN VISA {visa['visa_type'].upper()} {visa['country'].upper()}:\n\n"
        
        if "requirements" in visa:
            if isinstance(visa["requirements"], dict):
                for category, docs in visa["requirements"].items():
                    if isinstance(docs, list):
                        if category == "personal_docs":
                            response += "‚ñ∂Ô∏è H·ªì s∆° nh√¢n th√¢n:\n"
                        elif category == "financial_docs":
                            response += "‚ñ∂Ô∏è H·ªì s∆° ch·ª©ng minh t√†i s·∫£n:\n"
                        elif category == "employment_docs":
                            response += "‚ñ∂Ô∏è H·ªì s∆° c√¥ng vi·ªác & thu nh·∫≠p:\n"
                        elif category == "travel_docs":
                            response += "‚ñ∂Ô∏è Gi·∫•y t·ªù chuy·∫øn ƒëi:\n"
                        else:
                            response += f"‚ñ∂Ô∏è {category}:\n"
                        
                        for i, doc in enumerate(docs, 1):
                            response += f"{i}. {doc}\n"
                        response += "\n"
                    elif isinstance(docs, dict):
                        response += f"‚ñ∂Ô∏è {category}:\n"
                        for subcat, items in docs.items():
                            response += f"- {subcat.capitalize()}:\n"
                            for i, item in enumerate(items, 1):
                                response += f"  {i}. {item}\n"
                        response += "\n"
            else:
                for i, req in enumerate(visa["requirements"], 1):
                    response += f"{i}. {req}\n"
        
        response += f"\nüìû ƒê·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n chi ti·∫øt v·ªÅ h·ªì s∆°, vui l√≤ng g·ªçi hotline 1900 636563"
        return response
    
    # Similar implementation for other intents (_format_cost_response, _format_time_response, etc.)

# Kh·ªüi t·∫°o service
visa_service = VisaService()