import os
import google.generativeai as genai
from dotenv import load_dotenv
from services.visa_service import visa_service

load_dotenv()

class AIProcessor:
    def __init__(self):
        # C·∫•u h√¨nh Gemini API
        api_key = os.getenv("GEMINI_API_KEY")
        if not api_key:
            print("C·∫¢NH B√ÅO: Kh√¥ng t√¨m th·∫•y GEMINI_API_KEY trong bi·∫øn m√¥i tr∆∞·ªùng")
        genai.configure(api_key=api_key)
        
        # Thi·∫øt l·∫≠p model Gemini
        self.model = genai.GenerativeModel('gemini-1.5-pro')
        
        # ƒê·ªãnh nghƒ©a system prompt
        self.system_prompt = """
        B·∫°n l√† tr·ª£ l√Ω ·∫£o c·ªßa Passport Lounge, m·ªôt c√¥ng ty du l·ªãch Vi·ªát Nam. 
        
        C√ÅCH X·ª¨ L√ù C√ÇU H·ªéI V·ªÄ VISA:
        - Khi nh·∫≠n ƒë∆∞·ª£c c√¢u h·ªèi v·ªÅ visa, lu√¥n tham kh·∫£o d·ªØ li·ªáu ch√≠nh x√°c ƒë∆∞·ª£c cung c·∫•p trong ph·∫ßn VISA_DATA
        - D·ª±a v√†o th√¥ng tin visa ƒë∆∞·ª£c cung c·∫•p, tr·∫£ l·ªùi chi ti·∫øt v√† ƒë·∫ßy ƒë·ªß
        - Kh√¥ng t·ª± t·∫°o th√¥ng tin v·ªÅ gi√° c·∫£, th·ªß t·ª•c hay y√™u c·∫ßu - ch·ªâ s·ª≠ d·ª•ng d·ªØ li·ªáu ƒë∆∞·ª£c cung c·∫•p
        
        ƒê·∫∑c ƒëi·ªÉm ph·∫£n h·ªìi:
        - Th√¢n thi·ªán v√† chuy√™n nghi·ªáp
        - Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, ng·∫Øn g·ªçn nh∆∞ng ƒë·∫ßy ƒë·ªß th√¥ng tin
        - S·ª≠ d·ª•ng emoji ph√π h·ª£p (üòä, üåé, ‚úàÔ∏è, üè®, etc.)
        - Khuy·∫øn kh√≠ch kh√°ch h√†ng li√™n h·ªá tr·ª±c ti·∫øp ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n chi ti·∫øt
        - Hotline: 1900 636563
        """
    
    async def generate_response(self, user_message, context=None):
        """T·∫°o ph·∫£n h·ªìi th√¥ng minh t·ª´ Gemini AI"""
        try:
            # Ki·ªÉm tra n·∫øu c√¢u h·ªèi v·ªÅ visa
            if self._is_visa_query(user_message):
                # L·∫•y th√¥ng tin visa t·ª´ database
                visa_info = visa_service.get_visa_info(user_message)
                
                # N·∫øu c√≥ th√¥ng tin visa, t·∫°o response t·ª´ database
                if visa_info["success"]:
                    visa_response = visa_service.format_visa_response(visa_info)
                    return visa_response
                else:
                    # Kh√¥ng t√¨m th·∫•y th√¥ng tin visa, ƒë·ªÉ AI tr·∫£ l·ªùi d·ª±a tr√™n context
                    additional_context = f"Kh√¥ng t√¨m th·∫•y th√¥ng tin visa ch√≠nh x√°c cho c√¢u h·ªèi: {user_message}"
            
            # X√¢y d·ª±ng prompt v·ªõi th√¥ng tin t·ª´ system prompt
            prompt = self.system_prompt + "\n\n" + user_message
            
            # Th√™m context n·∫øu c√≥
            if context:
                history_text = ""
                if "previous_messages" in context and context["previous_messages"]:
                    history_text = "L·ªãch s·ª≠ tr√≤ chuy·ªán g·∫ßn ƒë√¢y:\n"
                    for msg in context["previous_messages"][-3:]:
                        sender = "Bot" if msg.get('sender') == "bot" else "Ng∆∞·ªùi d√πng"
                        history_text += f"{sender}: {msg.get('message', '')}\n"
                
                # Th√™m context v√†o cu·ªëi prompt
                if history_text:
                    prompt = prompt + "\n\nƒê√¢y l√† l·ªãch s·ª≠ tr√≤ chuy·ªán g·∫ßn ƒë√¢y:\n" + history_text
            
            # G·ª≠i prompt t·ªõi Gemini
            response = self.model.generate_content(prompt)
            
            # L·∫•y text t·ª´ response
            if hasattr(response, 'text'):
                return response.text
            else:
                return "Xin l·ªói, t√¥i kh√¥ng th·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa b·∫°n l√∫c n√†y."
            
        except Exception as e:
            print(f"Error in AI response generation: {e}")
            return self._get_fallback_response()
    
    def _is_visa_query(self, message):
        """Ki·ªÉm tra xem tin nh·∫Øn c√≥ ph·∫£i l√† c√¢u h·ªèi v·ªÅ visa kh√¥ng"""
        message = message.lower()
        visa_keywords = ["visa", "th·ªã th·ª±c", "xin visa", "l√†m visa", "h·ªì s∆° visa", "th·ªß t·ª•c visa"]
        
        return any(keyword in message for keyword in visa_keywords)
    
    def _get_fallback_response(self):
        """Tr·∫£ v·ªÅ c√¢u tr·∫£ l·ªùi d·ª± ph√≤ng khi AI g·∫∑p l·ªói"""
        import random
        fallbacks = [
            "Xin l·ªói, t√¥i ƒëang g·∫∑p v·∫•n ƒë·ªÅ k·∫øt n·ªëi. B·∫°n c√≥ th·ªÉ h·ªèi l·∫°i sau ƒë∆∞·ª£c kh√¥ng? üòä",
            "T√¥i kh√¥ng th·ªÉ tr·∫£ l·ªùi ngay l√∫c n√†y. B·∫°n c√≥ th·ªÉ li√™n h·ªá hotline 1900 636563 ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ nhanh nh·∫•t.",
            "H·ªá th·ªëng ƒëang b·∫≠n, vui l√≤ng th·ª≠ l·∫°i sau nh√©! Ho·∫∑c b·∫°n c√≥ th·ªÉ li√™n h·ªá tr·ª±c ti·∫øp v·ªõi nh√¢n vi√™n t∆∞ v·∫•n c·ªßa ch√∫ng t√¥i.",
            "Xin l·ªói v√¨ s·ª± b·∫•t ti·ªán n√†y. T√¥i ƒëang g·∫∑p kh√≥ khƒÉn trong vi·ªác x·ª≠ l√Ω y√™u c·∫ßu. B·∫°n c√≥ th·ªÉ th·ª≠ l·∫°i sau √≠t ph√∫t?",
            "R·∫•t ti·∫øc, t√¥i kh√¥ng th·ªÉ x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n l√∫c n√†y. H√£y li√™n h·ªá hotline 1900 636563 ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ ngay!"
        ]
        return random.choice(fallbacks)

    def update_user_preferences(self, user_id, message, entities):
        """C·∫≠p nh·∫≠t th√¥ng tin s·ªü th√≠ch c·ªßa ng∆∞·ªùi d√πng"""
        from services.database import db
        
        user_data = db.users.find_one({"user_id": user_id}) or {"user_id": user_id}
        preferences = user_data.get("preferences", {})
        
        # Ph√¢n t√≠ch v√† l∆∞u s·ªü th√≠ch
        if entities and entities.get("locations"):
            if "preferred_destinations" not in preferences:
                preferences["preferred_destinations"] = []
            for location in entities["locations"]:
                if location not in preferences["preferred_destinations"]:
                    preferences["preferred_destinations"].append(location)
        
        # Ph√°t hi·ªán s·ªü th√≠ch v·ªÅ ng√¢n s√°ch
        message_lower = message.lower()
        if "gi√° r·∫ª" in message_lower or "ti·∫øt ki·ªám" in message_lower:
            preferences["budget"] = "low"
        elif "sang tr·ªçng" in message_lower or "cao c·∫•p" in message_lower:
            preferences["budget"] = "high"
        
        # C·∫≠p nh·∫≠t d·ªØ li·ªáu ng∆∞·ªùi d√πng
        db.users.update_one(
            {"user_id": user_id},
            {"$set": {"preferences": preferences}},
            upsert=True
        )
        return preferences

# Kh·ªüi t·∫°o AI processor
ai_processor = AIProcessor()